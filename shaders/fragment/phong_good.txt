#version 330
in vec4 ex_worldPosition;
in vec3 ex_worldNormal;
uniform mat4 viewMatrix;
out vec4 out_Color;
void main() {
    vec3 world_normal = normalize(ex_worldNormal);
    vec4 color = vec4(0.385, 0.647, 0.812, 1.0);
	vec3 lightPosition = vec3(0.0, 0.0, 0.0);
	vec3 lightVector = normalize(lightPosition.xyz - ex_worldPosition.xyz);
	float dot_product = max(dot(world_normal, lightVector), 0.0);
	vec4 diffuse = max(dot_product, 0.0) * color;
	vec4 ambient = vec4(0.1, 0.1, 0.1, 1.0);

	float spec_strength = 1;
	vec3 camera_pos = vec3(inverse(viewMatrix)[3]);
	vec3 view_dir = normalize(camera_pos.xyz - ex_worldPosition.xyz);
	vec3 reflect_dir = reflect(-lightVector, world_normal);
    float spec = pow(max(dot(view_dir, reflect_dir), 0.0), 1);
    vec4 specular = spec_strength * spec * color;
	specular = dot_product <= 0.0 ? vec4(0, 0, 0, 0) : specular;

	out_Color = ambient + diffuse + specular;
}